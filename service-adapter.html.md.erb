---
title: Creating a Service Adapter
owner: London Services Enablement
---

This topic provides information for service authors about how to create a service
adapter for an on-demand service tile.
For more information about service author responsibilities, see
[Service Author Deliverables](./creating.html#what-is-required-of-the-service-authors).

## <a id="about"></a> About Service Adapters

A service adapter is an executable invoked by the on-demand broker (ODB).
Pivotal has published an SDK for teams writing their service adapters in golang.
For more information, see [On-Demand Services SDK Golang SDK](#sdk) below.

## <a id="subcommands"></a>Subcommands in the Adapter Interface

A service adapter is expected to respond to the subcommands below.
For more information about the parameters and expected output from these
subcommands, see
[Service Adapter Interface Reference](./adapter-reference.html).

- `generate-manifest`:
  Generate a BOSH manifest for your service instance deployment and output to stdout
  a JSON document containing the manifest as YAML, given information about the:
  - BOSH Director (stemcells, release names)
  - service instance (ID, request parameters, plan properties, IAAS resources)
  - previous manifest, if this is an upgrade deployment

    <p class="note"><strong>Note</strong>: ODB requires <code>generate-manifest</code> to be idempotent.
    Given the same arguments when a previous manifest is supplied&mdash;which
    happens during a deployment update&mdash;the command should always output
    the same BOSH manifest.</p>
    For more information about this subcommand, see [generate-manifest](./adapter-reference.html#generate-manifest).
<br><br>
- `dashboard-url`:
  Generate an optional URL of a web-based management user interface for the service instance.
  For more information about this subcommand, see [dashboard-url](./adapter-reference.html#dashboard-url).
<br><br>
- `create-binding`:
  Create (unique, if possible) credentials for the service instance, printing them to stdout as JSON.
  For more information about this subcommand, see [create-binding](./adapter-reference.html#create-binding).
<br><br>
- `delete-binding`:
  Invalidate the created credentials, if possible.
  Some services (e.g. Redis) are single-user, and this endpoint will do nothing.
  For more information about this subcommand, see [delete-binding](./adapter-reference.html#delete-binding).
<br><br>
- `generate-plan-schemas`:
  Generate a JSON schema to validate service-specific configuration parameters.
  For more information about this subcommand, see [generate-plan-schemas](./adapter-reference.html#generate-plan-schemas).


## <a id="storing-secrets"></a>Store Secrets on BOSH CredHub

The service adapter can generate secrets and use ODB as a proxy to the BOSH CredHub
Config server, instead of writing these secrets in plain text in the manifest.
To do this, use ODB managed secrets.

The following sections provide information about how to use ODB managed secrets to store,
persist and modify secrets in BOSH CredHub:

- [About ODB-Managed Secrets](#odb-managed-secrets)
- [Migrate from Plaintext Secrets to ODB Managed Secrets](#migrating-to-stored-secrets)
- [Persist Credentials Across Updates](#odb-persisting-creds)
- [Modify ODB-Managed Secrets](#modifying-secrets)


### <a id="odb-managed-secrets"></a> About ODB Managed Secrets

To use ODB managed secrets, the service adapter must do the following for the
`generate-manifest` output:

1. Generate a manifest that uses the ODB managed secrets placeholder
`((odb_secret:SECRET-NAME))` for the secret that you want to store in CredHub.

1. Output the secret as part of the `secrets` map.

For example:

```json
{
  "manifest": "password: ((odb_secret:SECRET-NAME))",
  "secrets": {
    "SECRET-NAME":"SOME-RANDOM-PASSWORD"
  }
}
```

<br>
When you use ODB managed secrets, ODB does the following during provision:

1. Generates a CredHub name for each secret in the `secrets` map in the format
`/odb/SERVICE-OFFERING-ID/SERVICE-INSTANCE-ID/SECRET-NAME`.

1. Replaces all occurrences of `((odb_secret:SECRET-NAME))` with the generated
CredHub name.

1. Deploys the updated manifest.


### <a id="migrating-to-stored-secrets"></a>Migrate from Plaintext Secrets to ODB-Managed Secrets

You can use the service adapter to migrate from plaintext secrets in the manifest
to ODB managed secrets that are stored in BOSH CredHub.
When the `generate-manifest` subcommand is provided with a previous manifest, the
service adapter copies secrets from the previous deployment to the new manifest.

To migrate from plaintext secrets to ODB managed secrets, write code in your
service adapter that does the following:

<p class="note"><strong>Note</strong>: Secrets already stored in BOSH CredHub do not need placeholders.
This is because ODB ignores BOSH CredHub names during <code>generate-manifest</code>.
</p>

* Detects whether a secret is a plaintext secret.

* Replaces each plaintext secret from the previous manifest with an ODB-managed
secrets placeholder `((odb_secret:SECRET-NAME))` in the new manifest.

* Returns the value of the secrets in the `secrets` map.
For more information about the `secrets` map, see
[About ODB-Managed Secrets](#odb-managed-secrets) above.

  * Each placeholder in the manifest a corresponding entry in the `secrets` map.
  * Each key in the `secrets` map at least one corresponding placeholder in the manifest.

* Only returns secrets in the `secrets` map when the value
of the secret is set for the first time, or if the value is changed.
For example, this might be when:

  * A new service is created.
  * You migrate plaintext secrets into BOSH CredHub.
  * You want to change the value for previously set secrets.

For example:

```go
import(
  "github.com/pivotal-cf/on-demand-services-sdk/serviceadapter"
)

func extractSecret(oldValue, secretName string, secretsMap map[string]string, newValue string) {
  if !strings.HasPrefix(redisPassword, "((") && !strings.HasSuffix(redisPassword, "))") {
    // This is a plaintext secret
    // Add the value to the secrets map, and return its placeholder to use in
    // the manifest.
    secretsMap[secretName] = oldValue
    newValue = fmt.Sprintf( "((%s:%s))", serviceadapter.ODBSecretPrefix, secretName)
    return newValue, secretsMap
  } else {
    // else: this secret could be one of the following:
    // - a custom CredHub path
    // - a reference to the BOSH generated variables block
    // - a CredHub reference to a secret already managed by the ODB
    // In all cases, the ODB does not need to send the secret to CredHub, so it
    // should not be included in the secrets map.
    return oldValue
  }
}
```


### <a id="odb-persisting-creds"></a>Persist Secrets across Updates

When dealing with properties that need to persist across updates,
the service adapter must extract the existing value for any ODB managed
secrets from the previous manifest.

The following manifest snippet shows an ODB managed secret with a CredHub name:

```
name: the-deployment
...
properties:
password: ((/odb/SERVICE-GUID/SERVICE-INSTANCE-GUID/SECRET-NAME))
```

If the previous manifest contains CredHub names for secrets, the `generate-manifest`
command must not replace `properties.password` with the placeholder `((odb_secret:SECRET-NAME))`.

For more information about using the value during a bind, see
[create-binding](./adapter-reference.html#create-binding).

### <a id="modifying-secrets"></a>Modify ODB-Managed Secrets

<p class="note warning"><strong>WARNING</strong>:
  Pivotal discourages modifying the value of secrets without changing the secret name.
  If the BOSH deploy task fails during update or upgrade, ODB managed secrets might
  be left in an inconsistent state.
  For more information, see <a href="#inconsistent-secrets">Inconsistent Secrets After a Failed Update</a>
  below.
</p>

When updating or upgrading a service instance, you might need to modify the value
of an ODB managed secret.

To modify a secret, write code in your service adapter that does the following:

1. Replaces the property in the manifest with an ODB managed secrets placeholder
that uses a new secret name.

1. Uses the `GenerateManifest` method to return the new secret in the secrets map.

#### <a id="inconsistent-secrets"></a>Inconsistent Secrets after a Failed Update

If you modify the value of a secret without providing a new secret name, ODB managed
secrets can be left in an inconsistent state if the update or upgrade of a BOSH
deployment fails.
This is because ODB updates the secrets in CredHub before updating the deployment.

The failed deployment might contain a mixture of old and new secrets depending on
the stage that the deployment failed.
If an operator attempts to troubleshoot this scenario by manually re-deploying
the previous manifest, this manifest will now contain CredHub names that refer
to the new secret values.
This can cause errors with bindings.

Pivotal recommends that you avoid modifying secrets without using new names for
new versions of secrets.

## <a id="create-binding-credentials"></a> Binding Credentials

Binding credentials for a service instance should share a namespace and should
be unique if possible.

For MySQL, two bindings could include different username/password pairs, but
share the same MySQL database tables and data.  The first step is to determine
which credentials are best to supply in the context of your service.
Pivotal recommends that users are identified statelessly from the binding ID.
The simplest way to do this is to name the user after the binding ID.

You can take one of three approaches to credentials for a service binding:

+ [Static Credentials](#static-credentials)
+ [Credentials Unique to Each Binding](#unique-credentials)
+ [Use an Agent](#agent)

###<a id="static-credentials"></a>Static Credentials

In this case, the same credentials are used for all bindings.
One option is to define these credentials in the service instance manifest.

This scenario makes sense for services that use the same credentials for all
bindings, such as Redis.

For example:

```yaml
properties:
  redis:
    password: PASSWORD
```

### <a id="unique-credentials"></a>Credentials Unique to Each Binding

In this case, when the adapter `generate-manifest` subcommand is invoked,
it generates random admin credentials and returns them as part of the service
instance manifest. When the `create-binding` subcommand is invoked, the adapter
can use the admin credentials from the manifest to create unique credentials
for the binding. Subsequent `create-binding` calls create new credentials.

This option makes sense for services whose binding creation resembles user creation,
such as MySQL or RabbitMQ. For example, in MySQL the admin user can be used to create
a new user and database for the binding:

```yaml
properties:
  admin_password: ADMIN-PASSWORD
```

### <a id="agent"></a>Use an Agent

In this case, the author defines an agent responsible for handling creation of
credentials unique to each binding. The agent must be added as a BOSH release
in the service manifest. Moreover, the service and agent jobs should be co-located
in the same instance group.

This option is useful for services where the adapter cannot or prefers not to
directly call out to the service instance and instead delegates responsibility
for setting up new credentials to an agent.

For example:

```yaml
releases:
  - name: service-release
    version: 1.5.7
  - name: credentials-agent-release
    version: 4.2.0

instance_groups:
  - name: service-group
    jobs:
      - name: service-job
        release: service-release
      - name: credentials-agent-job
        release: credentials-agent-release
```

## <a id="dns-addresses"></a> Enable ODB to Obtain BOSH DNS Addresses

<p class="note"><strong>Note:</strong>
 This feature requires BOSH Director v266.3 or later.
 This is available in Ops Manager v2.2 and later.</p>

You can configure ODB to provide BOSH DNS addresses for service instances to the
service adapter `create-binding` call.
This is useful when the binding for a service instance contains, or relies on,
BOSH DNS addresses for that deployment.
For more information about how DNS addresses are passed to the `create-binding` call,
see [DNS-ADDRESSES-JSON](./adapter-reference.html#create-binding-dns-addresses).

To enable ODB to provide service instance DNS addresses to the `create-binding` call,
do the following:

1. Provide a link from the service instance's BOSH release.
Choose any job in the service release and add the link to its `spec` file.
<br><br>
For example:

    ```
    name: redis-server-job
    ...
    provides:
      - name: example-link-1
        type: example-type
    ```
    <br>
For an example `spec` file, see the
[Redis Example Service Release](https://github.com/pivotal-cf-experimental/redis-example-service-release/blob/master/jobs/redis-server/spec).

2. Write code in the service adapter that shares the link you provided above in the BOSH
manifest generated for your service instance deployment.
<br><br>
Ensure you share the link in the same job that you added the link to in step 1.
Include the link in all instance groups that require a DNS address at binding time.
<br><br>
For example:

    ```yaml
    instance_groups:
    - name: leader-node
      jobs:
      - name: redis-server-job
        release: redis-cluster-release
        provides:                          # add this section
          example-link-1: {shared: true}
        ...
    ```

## <a id="handling-errors"></a>Handle Errors

If a subcommand fails, the adapter must return a non-zero exit status and,
optionally, print to stdout or stderr.

When a subcommand exits with an unrecognized exit code anything printed to stdout
is returned to the CF CLI user.

Both the stdout and stderr streams are printed in the broker log for the operator.
For that reason, Pivotal recommends not printing the manifest or other sensitive
details to stdout or stderr, because ODB does no validation on this output.

For an example implementation, see the
[Kafka example service adapter](https://github.com/pivotal-cf-experimental/kafka-example-service-adapter/blob/892d48b066c9b1d2651080484a53531001e9e920/adapter/create_binding.go#L27-L29).

## <a id="packaging"></a>Package a Service Adapter

Package the service adapter as a BOSH release.
The operator should co-locate the service adapter release with the ODB release in
a BOSH manifest to place the adapter executable on the same VM as the ODB server.
As a result, the adapter BOSH job's `monit` file should  have no processes defined.

See the following example service adapter releases:

- <a href="https://github.com/pivotal-cf-experimental/kafka-example-service-adapter-release">Kafka example service adapter release</a>
- <a href="https://github.com/pivotal-cf-experimental/redis-example-service-adapter-release">Redis example service adapter release</a>

For more information about how to create a BOSH release, see
[Creating a Release](https://bosh.io/docs/create-release/) in the BOSH documentation.

## <a id="sdk"></a> On-Demand Services Golang SDK

Pivotal has published an SDK for teams writing their service adapters in golang.
It encapsulates the command line invocation handling, parameter parsing, response
serialization and error handling so the adapter authors can focus on the
service-specific logic in the adapter.
For more information about the Golang SDK, see the
[on demand service sdk](https://github.com/pivotal-cf/on-demand-services-sdk)
repository on GitHub.

For the generated BOSH manifest, the SDK supports properties in two levels:
manifest global and job level.
Global properties are deprecated in BOSH, in favor of job level properties and job links.

For an example of property generation, see the
[Kafka example service adapter](https://github.com/pivotal-cf-experimental/kafka-example-service-adapter/blob/4a27c55ff6ea4a62e95e9a57e100333af5b24573/adapter/generate_manifest.go#L100-L129).

### <a id="sdk_usage"></a>Use the SDK

Perform the following steps to use the SDK:

1. Install the SDK by running the following `go get` command to install the SDK:

    ```
    go get github.com/pivotal-cf/on-demand-services-sdk
    ```
    Use the same version of the SDK as your ODB release. For example, if you are
    using v0.8.0 of the ODB BOSH release, you should check out the v0.8.0 tag of
    the SDK.

1. In the main function for the service adapter, call the `HandleCLI` function:

    ```go
    package main

    import (
    	"log"
    	"os"

    	"github.com/bar-org/foo-service-adapter/adapter"
    	"github.com/pivotal-cf/on-demand-services-sdk/serviceadapter"
    )

    func main() {
      logger := log.New(os.Stderr, "[foo-service-adapter] ", log.LstdFlags)
      manifestGenerator := adapter.ManifestGenerator{}
      binder := adapter.Binder{}
      dashboardUrlGenerator := adapter.DashboardUrlGenerator{}
    	handler := serviceadapter.CommandLineHandler{
      	ManifestGenerator:     manifestGenerator,
      	Binder:                binder,
      	DashboardURLGenerator: &adapter.DashboardUrlGenerator{},
      	SchemaGenerator:       adapter.SchemaGenerator{},
    	}
      serviceadapter.HandleCLI(os.Args, handler)
    }
    ```
  <p class="note"><strong>Note</strong>:
    The HandleCommandLineInvocation function is deprecated, but its functionality
    can be seen <a href="https://docs.pivotal.io/svc-sdk/odb/0-19/creating.html#usage">here</a>.</p>

### <a id="interfaces"></a>Interfaces

The `HandleCLI` function accepts structs that implement the following interfaces:

```go
type CommandLineHandler struct {
	ManifestGenerator     ManifestGenerator
	Binder                Binder
	DashboardURLGenerator DashboardUrlGenerator
	SchemaGenerator       SchemaGenerator
}

type ManifestGenerator interface {
	GenerateManifest(serviceDeployment ServiceDeployment, plan Plan, requestParams RequestParameters, previousManifest *bosh.BoshManifest, previousPlan *Plan) (bosh.BoshManifest, error)
}

type Binder interface {
	CreateBinding(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest, requestParams RequestParameters) (Binding, error)
	DeleteBinding(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest, requestParams RequestParameters) error
}

type DashboardUrlGenerator interface {
	DashboardUrl(instanceID string, plan Plan, manifest bosh.BoshManifest) (DashboardUrl, error)
}

type SchemaGenerator interface {
	GeneratePlanSchema(plan Plan) (PlanSchema, error)
}
```

### <a id="helper_function"></a>Helpers

The helper function `GenerateInstanceGroupsWithNoProperties` can generate the
instance groups for the BOSH manifest from the arguments passed to the adapter.

One of the inputs for this function is `deploymentInstanceGroupsToJobs`,
where instance groups are mapped to jobs for the deployment.
The service author must provide this mapping.
The helper function does not address job level properties for the generated instance groups;
the service author must provide these properties.
For an example implementation, see the job mapping in the [Kafka example
adapter](https://github.com/pivotal-cf-experimental/kafka-example-service-adapter/blob/master/adapter/generate_manifest.go#L15-L21).

The SDK provides the methods `ArbitraryContext` and `Platform`. These are
used to extract the `context` property from the request parameters and the `platform` property from within the
`context`.

The context in the response is a feature of Open Service Broker API (OSBAPI) v2.13
specification and is used to pass through information about the environment in which the
platform or app is executing.
See the [OSBAPI v2.13 specification](https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/spec.md).
If the platform does not provide a `context`, the SDK returns empty values.

### <a id="error_handling"></a>Error Handling

Any error returned by the interface functions is considered to be for the Cloud
Foundry CLI user and is printed to stdout.

The adapter code is responsible for performing any error logging to stderr that
the authors think is relevant for the operator logs.

There are three specialised errors for the `CreateBinding` function, which allow
the adapter to exit with the appropriate code:

```go
serviceadapter.NewBindingAlreadyExistsError()
serviceadapter.NewBindingNotFoundError()
serviceadapter.NewAppGuidNotProvidedError()
```

For more complete code examples, see the
[Kafka example service adapter](https://github.com/pivotal-cf-experimental/kafka-example-service-adapter)
or the [Redis example service adapter](https://github.com/pivotal-cf-experimental/redis-example-service-adapter).

### <a id="bosh_features"></a>BOSH Features

Service authors can enable configuration of BOSH Features in their service adapters.

The SDK provides the `BoshFeatures` struct below,
with the possibility of adding extra features using the `ExtraFeatures` map:

```
type BoshFeatures struct {
	UseDNSAddresses      *bool                  `yaml:"use_dns_addresses,omitempty"`
	RandomizeAZPlacement *bool                  `yaml:"randomize_az_placement,omitempty"`
	UseShortDNSAddresses *bool                  `yaml:"use_short_dns_addresses,omitempty"`
	ExtraFeatures        map[string]interface{} `yaml:"extra_features,inline"`
}
```

For an example implementation, see the [Redis example service adapter](https://github.com/pivotal-cf-experimental/redis-example-service-adapter/blob/4f78b89d791733d025ae96f4056eb6840989818e/adapter/redis_manifest_generator.go#L215-L222).

For more information on BOSH Features, see [the BOSH documentation](https://bosh.io/docs/manifest-v2.html#features).
